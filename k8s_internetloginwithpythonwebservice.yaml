##  ___       _                       _   _                _    __        ___ _    _     ____        _   _              __        __   _    ____                   _
## |_ _|_ __ | |_ ___ _ __ _ __   ___| |_| |    ___   __ _(_)_ _\ \      / (_) |_ | |__ |  _ \ _   _| |_| |__   ___  _ _\ \      / /__| |__/ ___|  ___ _ __ __   _(_) ___ ___
##  | || '_ \| __/ _ \ '__| '_ \ / _ \ __| |   / _ \ / _` | | '_ \ \ /\ / /| | __|| '_ \| |_) | | | | __| '_ \ / _ \| '_ \ \ /\ / / _ \ '_ \___ \ / _ \ '__|\ \ / / |/ __/ _ \
##  | || | | | ||  __/ |  | | | |  __/ |_| |__| (_) | (_| | | | | \ V  V / | | |_ | | | |  __/| |_| | |_| | | | (_) | | | \ V  V /  __/ |_) |__) |  __/ |    \ V /| | (_|  __/
## |___|_| |_|\__\___|_|  |_| |_|\___|\__|_____\___/ \__, |_|_| |_|\_/\_/  |_|\__||_| |_|_|    \__, |\__|_| |_|\___/|_| |_|\_/\_/ \___|_.__/____/ \___|_|     \_/ |_|\___\___|
##                                                   |___/                                     |___/

## InternetLoginWithPythonWebService, short: InternetLoginPyWS
## https://github.com/Tob1as/internetloginwithpythonwebservice

---

apiVersion: v1
kind: Namespace
metadata:
  name: adminservices
  annotations:
    field.cattle.io/description: Services for Admins

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: internetloginpyws-env-config
  namespace: adminservices
  labels:
    app: internetloginpyws
data:
  TZ: "Europe/Berlin"
  HTTPD_BASEPATH: "/internet"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: internetloginpyws
  namespace: adminservices
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: internetloginpyws
  template:
    metadata:
      labels:
        app: internetloginpyws
    spec:
      #imagePullSecrets:
      #- name: regcred
      containers:
        - name: internetloginpyws
          image: ghcr.io/tob1as/internetloginwithpythonwebservice:latest
          imagePullPolicy: Always #IfNotPresent
          envFrom:
          - configMapRef:
              name: internetloginpyws-env-config
          ports:
          - containerPort: 8000
            name: webservice
            protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8000
            failureThreshold: 4
            initialDelaySeconds: 15
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8000
            failureThreshold: 4
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              memory: "128Mi"
              cpu: "0.1"
            limits:
              memory: "512Mi"
              cpu: "0.5"
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: internetloginpyws
  namespace: adminservices
  labels:
    app: internetloginpyws
spec:
  type: ClusterIP
  ports:
    - name: "webservice"
      protocol: TCP
      port: 8000
      targetPort: 8000
  selector:
    app: internetloginpyws

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: internetloginpyws
  namespace: adminservices
  labels:
    app: internetloginpyws
  annotations:
    ## https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/
    kubernetes.io/ingress.class: nginx
    #nginx.ingress.kubernetes.io/ssl-redirect: "false"
    #nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    #nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    #nginx.ingress.kubernetes.io/whitelist-source-range: ""
    #cert-manager.io/cluster-issuer: ingress-tls-secret
    #cert-manager.io/acme-challenge-type: http01
spec:
  tls:
  - hosts:
    - example.com
    secretName: ingress-tls-secret
  rules:
  - host: example.com
    http:
      paths:
      - path: /internet
        pathType: ImplementationSpecific
        backend:
          service:
            name: internetloginpyws
            port:
              #name: webservice
              number: 8000

---

## SSL for ingress

## convert ssl files to base64, example:
## for i in $(find . -type f -regex ".*/.*\.\(crt\|key\|pem\)"); do echo -e "\nEncode-File $i:" ; cat $i | base64 -w0 ; done > ssl_convertinbase64.txt

apiVersion: v1
kind: Secret
metadata:
  name: ingress-tls-secret
  namespace: adminservices
type: kubernetes.io/tls
data:
  tls.crt: <ssl.crt>
  tls.key: <ssl.key>
